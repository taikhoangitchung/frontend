"use client"

import {useEffect, useState} from "react"
import {Download} from "lucide-react"
import {Card, CardContent, CardHeader, CardTitle} from "../../components/ui/card";
import {Button} from "../../components/ui/button";
import {Input} from "../../components/ui/input";
import {Select, SelectContent, SelectItem, SelectTrigger, SelectValue} from "../../components/ui/select";
import * as ExcelJS from "exceljs";
import {saveAs} from "file-saver"
import CategoryService from "../../services/CategoryService";
import DifficultyService from "../../services/DifficultyService";
import TypeService from "../../services/TypeService";
import {toast} from "sonner";

export default function ExcelTemplate() {
    const [questions, setQuestions] = useState([
        {
            id: "1",
            content: "∆Øu ƒëi·ªÉm c·ªßa Java l√† g√¨ ?",
            category: "ƒê·ªãa l√Ω",
            difficulty: "D·ªÖ",
            type: "Nhi·ªÅu l·ª±a ch·ªçn",
            answer1: "T√≠nh ƒëa n·ªÅn t·∫£ng",
            answer2: "H∆∞·ªõng ƒë·ªëi t∆∞·ª£ng r√µ r√†ng",
            answer3: "B·∫£o m·∫≠t v√† qu·∫£n l√Ω b·ªô nh·ªõ t·ªët",
            answer4: "Hi·ªáu su·∫•t ch·∫≠m h∆°n so v·ªõi ng√¥n ng·ªØ bi√™n d·ªãch nh∆∞ C/C++",
            correct: "1,2,3",
        },
        {
            id: "2",
            content: "2 + 2 = ?",
            category: "To√°n h·ªçc",
            difficulty: "D·ªÖ",
            type: "M·ªôt l·ª±a ch·ªçn",
            answer1: "3",
            answer2: "4",
            answer3: "5",
            answer4: "6",
            correct: "4",
        },
        {
            id: "3",
            content: "Tr√°i ƒë·∫•t quay quanh m·∫∑t tr·ªùi",
            category: "Khoa h·ªçc",
            difficulty: "D·ªÖ",
            type: "ƒê√∫ng/Sai",
            answer1: "ƒê√∫ng",
            answer2: "Sai",
            answer3: "",
            answer4: "",
            correct: "1",
        },
    ])
    const [categories, setCategories] = useState([]);
    const [difficulties, setDifficulties] = useState([]);
    const [types, setTypes] = useState([]);

    useEffect(() => {
        const fetchData = async () => {
            try {
                const resCategories = await CategoryService.getAll();
                setCategories(resCategories.data.map(category => category.name));
                const resDifficulties = await DifficultyService.getAll();
                setDifficulties(resDifficulties.data.map(difficulty => difficulty.name));
                const resTypes = await TypeService.getAll();
                setTypes(resTypes.data.map(type => type.name));
            } catch (error) {
                toast.error(error?.response?.data || "L·ªói khi l·∫•y d·ªØ li·ªáu")
            }
        }

        fetchData();
    }, []);

    const updateQuestion = (id, field, value) => {
        setQuestions(questions.map((q) => (q.id === id ? {...q, [field]: value} : q)))
    }

    const downloadExcel = async () => {
        try {
            const workbook = new ExcelJS.Workbook()
            const questionSheet = workbook.addWorksheet("C√¢u h·ªèi")

            questionSheet.columns = [
                {header: "N·ªôi dung", key: "content", width: 50},
                {header: "Danh m·ª•c", key: "category", width: 20},
                {header: "ƒê·ªô kh√≥", key: "difficulty", width: 15},
                {header: "Lo·∫°i c√¢u h·ªèi", key: "type", width: 25},
                {header: "ƒê√°p √°n 1", key: "a1", width: 20},
                {header: "ƒê√°p √°n 2", key: "a2", width: 20},
                {header: "ƒê√°p √°n 3", key: "a3", width: 20},
                {header: "ƒê√°p √°n 4", key: "a4", width: 20},
                {header: "ƒê√°p √°n ƒë√∫ng", key: "correct", width: 20},
            ]

            questions.forEach((q) => {
                questionSheet.addRow({
                    content: q.content,
                    category: q.category,
                    difficulty: q.difficulty,
                    type: q.type,
                    a1: q.answer1,
                    a2: q.answer2,
                    a3: q.answer3 || "",
                    a4: q.answer4 || "",
                    correct: q.correct,
                })
            })

            for (let i = 2; i <= 100; i++) {
                questionSheet.getCell(`B${i}`).dataValidation = {
                    type: "list",
                    allowBlank: true,
                    formulae: [`"${categories.join(",")}"`],
                }
                questionSheet.getCell(`C${i}`).dataValidation = {
                    type: "list",
                    allowBlank: true,
                    formulae: [`"${difficulties.join(",")}"`],
                }
                questionSheet.getCell(`D${i}`).dataValidation = {
                    type: "list",
                    allowBlank: true,
                    formulae: [`"${types.join(",")}"`],
                }
            }

            const guideSheet = workbook.addWorksheet("H∆∞·ªõng d·∫´n")
            guideSheet.columns = [
                {header: "C·ªôt", key: "col", width: 20},
                {header: "M√¥ t·∫£", key: "desc", width: 60},
                {header: "B·∫Øt bu·ªôc", key: "required", width: 15},
            ]

            const guideData = [
                {col: "N·ªôi dung", desc: "N·ªôi dung c·ªßa c√¢u h·ªèi", required: "C√≥"},
                {col: "Danh m·ª•c", desc: `Ch·ªçn m·ªôt trong: ${categories.join(", ")}`, required: "C√≥"},
                {col: "ƒê·ªô kh√≥", desc: `Ch·ªçn m·ªôt trong: ${difficulties.join(", ")}`, required: "C√≥"},
                {col: "Lo·∫°i c√¢u h·ªèi", desc: `Ch·ªçn m·ªôt trong: ${types.join(", ")}`, required: "C√≥"},
                {col: "ƒê√°p √°n 1", desc: "ƒê√°p √°n th·ª© nh·∫•t", required: "C√≥"},
                {col: "ƒê√°p √°n 2", desc: "ƒê√°p √°n th·ª© hai", required: "C√≥"},
                {col: "ƒê√°p √°n 3", desc: "ƒê√°p √°n th·ª© ba (t√πy ch·ªçn v·ªõi ƒê√∫ng/Sai)", required: "T√πy ch·ªçn"},
                {col: "ƒê√°p √°n 4", desc: "ƒê√°p √°n th·ª© t∆∞ (t√πy ch·ªçn v·ªõi ƒê√∫ng/Sai)", required: "T√πy ch·ªçn"},
                {col: "ƒê√°p √°n ƒë√∫ng", desc: "Ph·∫£i tr√πng v·ªõi m·ªôt trong c√°c ƒë√°p √°n", required: "C√≥"},
            ]
            guideData.forEach((g) => guideSheet.addRow(g))

            const dropdownSheet = workbook.addWorksheet("D·ªØ li·ªáu dropdown")
            dropdownSheet.columns = [
                {header: "Lo·∫°i", key: "type", width: 20},
                {header: "Gi√° tr·ªã", key: "value", width: 60},
            ]

            const dropdownData = [
                {type: "Danh m·ª•c", value: categories.join(", ")},
                {type: "ƒê·ªô kh√≥", value: difficulties.join(", ")},
                {type: "Lo·∫°i c√¢u h·ªèi", value: types.join(", ")},
            ]
            dropdownData.forEach((d) => dropdownSheet.addRow(d))

            const buffer = await workbook.xlsx.writeBuffer()
            const now = new Date()
            const timestamp = now.toISOString().slice(0, 19).replace(/:/g, "-")
            const filename = `cau-hoi-quizizz-${timestamp}.xlsx`

            saveAs(new Blob([buffer]), filename)
            toast.success(`File ${filename} ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!`)
        } catch (error) {
            toast.error("‚ùå L·ªói khi t·∫°o file Excel:", error)
        }
    }

    return (
        <div className="min-h-screen bg-gradient-to-br from-purple-50 via-blue-50 to-indigo-100 p-4">
            <div className="max-w-7xl mx-auto">
                <Card className="shadow-xl border-0 bg-white/80 backdrop-blur-sm">
                    <CardHeader className="bg-gradient-to-r from-purple-600 to-blue-600 text-white rounded-t-lg">
                        <div className="flex items-center justify-between">
                            <CardTitle className="text-3xl font-bold flex items-center gap-2 py-6 px-4">
                                üìä M·∫´u File Excel (.xlsx)
                            </CardTitle>
                            <Button
                                onClick={downloadExcel}
                                className="bg-white text-purple-600 hover:bg-purple-100 hover:shadow-md font-semibold cursor-pointer transition duration-150"
                            >
                                <Download className="w-4 h-4 mr-2"/>
                                T·∫£i xu·ªëng Excel
                            </Button>
                        </div>
                    </CardHeader>

                    <CardContent className="p-6">
                        <div className="mb-6">
                            <h3 className="text-lg font-semibold text-gray-700">Danh s√°ch c√¢u h·ªèi m·∫´u</h3>
                            <p className="text-sm text-gray-500 mt-1">Bao g·ªìm 3 lo·∫°i c√¢u h·ªèi: Tr·∫Øc nghi·ªám nhi·ªÅu l·ª±a
                                ch·ªçn, Tr·∫Øc nghi·ªám m·ªôt l·ª±a ch·ªçn, v√† ƒê√∫ng/Sai</p>
                        </div>

                        <div className="overflow-x-auto rounded-lg border border-gray-200">
                            <table className="w-full">
                                <thead>
                                <tr className="bg-gradient-to-r from-purple-100 to-blue-100">
                                    <th className="font-bold text-purple-800 p-3 text-left min-w-[200px] border-b border-gray-200">N·ªôi
                                        dung
                                    </th>
                                    <th className="font-bold text-purple-800 p-3 text-left min-w-[120px] border-b border-gray-200">Danh
                                        m·ª•c
                                    </th>
                                    <th className="font-bold text-purple-800 p-3 text-left min-w-[100px] border-b border-gray-200">ƒê·ªô
                                        kh√≥
                                    </th>
                                    <th className="font-bold text-purple-800 p-3 text-left min-w-[150px] border-b border-gray-200">Lo·∫°i
                                        c√¢u h·ªèi
                                    </th>
                                    <th className="font-bold text-purple-800 p-3 text-left min-w-[120px] border-b border-gray-200">ƒê√°p
                                        √°n 1
                                    </th>
                                    <th className="font-bold text-purple-800 p-3 text-left min-w-[120px] border-b border-gray-200">ƒê√°p
                                        √°n 2
                                    </th>
                                    <th className="font-bold text-purple-800 p-3 text-left min-w-[120px] border-b border-gray-200">ƒê√°p
                                        √°n 3
                                    </th>
                                    <th className="font-bold text-purple-800 p-3 text-left min-w-[120px] border-b border-gray-200">ƒê√°p
                                        √°n 4
                                    </th>
                                    <th className="font-bold text-purple-800 p-3 text-left min-w-[120px] border-b border-gray-200">ƒê√°p
                                        √°n ƒë√∫ng
                                    </th>
                                </tr>
                                </thead>
                                <tbody>
                                {questions.map((question, index) => (
                                    <tr key={question.id} className={index % 2 === 0 ? "bg-white" : "bg-gray-50"}>
                                        <td className="p-3 border-b border-gray-200">
                                            <Input
                                                value={question.content}
                                                onChange={(e) => updateQuestion(question.id, "content", e.target.value)}
                                                placeholder="Nh·∫≠p n·ªôi dung c√¢u h·ªèi..."
                                                className="border-gray-300 focus:border-purple-500 w-[200px]"
                                            />
                                        </td>
                                        <td className="p-3 border-b border-gray-200">
                                            <Select
                                                value={question.category}
                                                onValueChange={(value) => updateQuestion(question.id, "category", value)}
                                            >
                                                <SelectTrigger className="border-gray-300 focus:border-purple-500">
                                                    <SelectValue placeholder="Ch·ªçn danh m·ª•c"/>
                                                </SelectTrigger>
                                                <SelectContent className={"bg-white"}>
                                                    {categories.map((cat) => (
                                                        <SelectItem key={cat} value={cat} className={"cursor-pointer"}>
                                                            {cat}
                                                        </SelectItem>
                                                    ))}
                                                </SelectContent>
                                            </Select>
                                        </td>
                                        <td className="p-3 border-b border-gray-200">
                                            <Select
                                                value={question.difficulty}
                                                onValueChange={(value) => updateQuestion(question.id, "difficulty", value)}
                                            >
                                                <SelectTrigger className="border-gray-300 focus:border-purple-500"
>
                                                    <SelectValue placeholder="ƒê·ªô kh√≥"/>
                                                </SelectTrigger>
                                                <SelectContent className={"bg-white"}>
                                                    {difficulties.map((diff) => (
                                                        <SelectItem key={diff} value={diff} className={"cursor-pointer"}>
                                                            {diff}
                                                        </SelectItem>
                                                    ))}
                                                </SelectContent>
                                            </Select>
                                        </td>
                                        <td className="p-3 border-b border-gray-200">
                                            <Select
                                                value={question.type}
                                                onValueChange={(value) => updateQuestion(question.id, "type", value)}
                                            >
                                                <SelectTrigger className="border-gray-300 focus:border-purple-500"
>
                                                    <SelectValue placeholder="Lo·∫°i c√¢u h·ªèi"/>
                                                </SelectTrigger>
                                                <SelectContent className={"bg-white"}>
                                                    {types.map((type) => (
                                                        <SelectItem key={type} value={type} className={"cursor-pointer"}>
                                                            {type}
                                                        </SelectItem>
                                                    ))}
                                                </SelectContent>
                                            </Select>
                                        </td>
                                        <td className="p-3 border-b border-gray-200">
                                            <Input
                                                value={question.answer1}
                                                onChange={(e) => updateQuestion(question.id, "answer1", e.target.value)}
                                                placeholder="ƒê√°p √°n A"
                                                className="border-gray-300 focus:border-purple-500 w-[200px]"

                                            />
                                        </td>
                                        <td className="p-3 border-b border-gray-200">
                                            <Input
                                                value={question.answer2}
                                                onChange={(e) => updateQuestion(question.id, "answer2", e.target.value)}
                                                placeholder="ƒê√°p √°n B"
                                                className="border-gray-300 focus:border-purple-500 w-[200px]"

                                            />
                                        </td>
                                        <td className="p-3 border-b border-gray-200">
                                            <Input
                                                value={question.answer3}
                                                onChange={(e) => updateQuestion(question.id, "answer3", e.target.value)}
                                                placeholder="ƒê√°p √°n C"
                                                className="border-gray-300 focus:border-purple-500 w-[200px]"

                                                disabled={question.type === "ƒê√∫ng/Sai"}
                                            />
                                        </td>
                                        <td className="p-3 border-b border-gray-200">
                                            <Input
                                                value={question.answer4}
                                                onChange={(e) => updateQuestion(question.id, "answer4", e.target.value)}
                                                placeholder="ƒê√°p √°n D"
                                                className="border-gray-300 focus:border-purple-500 w-[200px]"

                                                disabled={question.type === "ƒê√∫ng/Sai"}
                                            />
                                        </td>
                                        <td className="p-3 border-b border-gray-200">
                                            <Input
                                                value={question.correct}
                                                onChange={(e) => updateQuestion(question.id, "correct", e.target.value)}
                                                placeholder="ƒê√°p √°n ƒë√∫ng"
                                                className="border-gray-300 focus:border-purple-500 w-[200px]"

                                            />
                                        </td>
                                    </tr>
                                ))}
                                </tbody>
                            </table>
                        </div>

                        <div className="mt-6 p-4 bg-blue-50 rounded-lg border border-blue-200">
                            <h4 className="font-semibold text-blue-800 mb-2">üìã H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng:</h4>
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm text-blue-700">
                                <div>
                                    <h5 className="font-semibold mb-1">Lo·∫°i c√¢u h·ªèi:</h5>
                                    <ul className="space-y-1">
                                        <li>‚Ä¢ <strong>Tr·∫Øc nghi·ªám nhi·ªÅu l·ª±a ch·ªçn:</strong> S·ª≠ d·ª•ng t·∫•t c·∫£ 4 ƒë√°p √°n</li>
                                        <li>‚Ä¢ <strong>Tr·∫Øc nghi·ªám m·ªôt l·ª±a ch·ªçn:</strong> C√≥ th·ªÉ s·ª≠ d·ª•ng 2-4 ƒë√°p √°n</li>
                                        <li>‚Ä¢ <strong>ƒê√∫ng/Sai:</strong> Ch·ªâ s·ª≠ d·ª•ng ƒë√°p √°n 1 v√† 2</li>
                                    </ul>
                                </div>
                                <div>
                                    <h5 className="font-semibold mb-1">ƒê√°p √°n ƒë√∫ng : </h5>
                                    <ul className="space-y-1">
                                        <li>‚Ä¢ V√≠ d·ª• n·∫øu ƒë√°p √°n ƒë√∫ng l√† ƒê√°p √°n 1 v√† ƒê√°p √°n 2 th√¨ ƒëi·ªÅn v√†o c·ªôt "ƒê√°p √°n ƒë√∫ng" l√† 1,2</li>
                                    </ul>
                                </div>
                            </div>
                        </div>
                    </CardContent>
                </Card>
            </div>
        </div>
    )
}
